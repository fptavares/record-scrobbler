input AddToPlaylistInput {
  albumId: ID!
  clientMutationId: String
}

type AddToPlaylistPayload {
  album: Album
  viewer: Viewer
  clientMutationId: String
}

type Album implements Node {
  # The ID of an object
  id: ID!
  releaseId: Int
  title: String
  artist: String
  year: Int
  thumb: String
  rating: Int
  notes: String
  dateAdded: String
  folderId: Int
  inPlaylist: Int
  tracks: [Track]
}

# A connection to a list of items.
type AlbumConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [AlbumEdge]
}

# An edge in a connection.
type AlbumEdge {
  # The item at the end of the edge
  node: Album

  # A cursor for use in pagination
  cursor: String!
}

input AuthenticateDiscogsInput {
  oauthVerifier: String!
  clientMutationId: String
}

type AuthenticateDiscogsPayload {
  viewer: Viewer
  token: String
  clientMutationId: String
}

input AuthenticateLastfmInput {
  oauthToken: String!
  clientMutationId: String
}

type AuthenticateLastfmPayload {
  viewer: Viewer
  token: String
  clientMutationId: String
}

input DiscogsRequestTokenInput {
  callbackUrl: String!
  clientMutationId: String
}

type DiscogsRequestTokenPayload {
  token: String
  discogsAuthorizeUrl: String
  clientMutationId: String
}

type DiscogsUser implements Node {
  # The ID of an object
  id: ID!
  username: String
  name: String
  numCollection: Int
  avatarURL: String
  folders: [Folder]
}

type Folder {
  id: Int
  name: String
  count: Int
}

input GetLastfmAuthenticationUrlInput {
  callbackUrl: String!
  clientMutationId: String
}

type GetLastfmAuthenticationUrlPayload {
  authenticationUrl: String
  clientMutationId: String
}

type LastfmUser implements Node {
  # The ID of an object
  id: ID!
  username: String
  name: String
  avatarURL: String
  lastScrobble: String
}

type Mutation {
  getDiscogsRequestToken(input: DiscogsRequestTokenInput!): DiscogsRequestTokenPayload
  authenticateDiscogs(input: AuthenticateDiscogsInput!): AuthenticateDiscogsPayload
  getLastfmAuthenticationUrl(input: GetLastfmAuthenticationUrlInput!): GetLastfmAuthenticationUrlPayload
  authenticateLastfm(input: AuthenticateLastfmInput!): AuthenticateLastfmPayload
  addToPlaylist(input: AddToPlaylistInput!): AddToPlaylistPayload
  removeFromPlaylist(input: RemoveFromPlaylistInput!): RemoveFromPlaylistPayload
  scrobble(input: ScrobbleInput!): ScrobblePayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Playlist implements Node {
  # The ID of an object
  id: ID!
  numItems: Int
  items: [Album]
}

type Query {
  viewer: Viewer

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

input RemoveFromPlaylistInput {
  albumId: ID!
  clientMutationId: String
}

type RemoveFromPlaylistPayload {
  album: Album
  viewer: Viewer
  clientMutationId: String
}

input ScrobbleInput {
  clientMutationId: String
}

type ScrobblePayload {
  accepted: Int
  ignored: Int
  playlist: Playlist
  scrobbledAlbums: [Album]
  clientMutationId: String
}

type SubTrack {
  position: String
  title: String
  duration: String
  type: String
}

type Track {
  subTracks: [SubTrack]
}

type Viewer {
  # The ID of an object
  id: ID!
  username: String
  lastfmUsername: String
  discogsUser: DiscogsUser
  lastfmUser: LastfmUser
  collection(search: String, after: String, first: Int): AlbumConnection
  playlist: Playlist
}
